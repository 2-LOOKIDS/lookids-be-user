name: CI/CD

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    types: [closed]
    branches: ["main", "dev"]
  workflow_dispatch:  # 수동 트리거 추가

permissions:  
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-  

    ## create application-prod.yml with S3 configuration
    - name: make application-prod.yml
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.yml
        echo '${{ secrets.APPLICATION_YAML }}' > ./application.yml
      shell: bash

    ## install AWS CLI
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install awscli -y

    ## grant execute permission for gradlew
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test
      
    ## docker build & push to production
    - name: Docker build & push to prod
      run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:user .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:user

    ## deploy to production using SSM
    - name: Deploy to Production with SSM
      run: |
        # Stop and remove old container if exists
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]' \
          --parameters 'commands=["sudo docker stop user || true", "sudo docker rm user || true"]' \
          --comment "Stopping and removing old container" \
          --region ap-northeast-2

        # Pull new image and start container
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]' \
          --parameters 'commands=["echo ${{ secrets.DOCKER_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin", "sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:user", "sudo docker run -d --name user --network lookids ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:user"]' \
          --comment "Deploying new Docker container" \
          --region ap-northeast-2

        # Clean up unused images
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets '[{"Key":"InstanceIds","Values":["${{ secrets.EC2_INSTANCE_ID }}"]}]' \
          --parameters 'commands=["sudo docker image prune -f"]' \
          --comment "Pruning unused Docker images" \
          --region ap-northeast-2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
